/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.rangebar;

import android.app.Activity;
import android.content.res.Resources;
import android.view.LayoutInflater;
import android.view.View;
import com.appyvet.materialrangebar.RangeBar;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiUIView;

@Kroll.proxy(creatableInModule = TiRangebarModule.class)
public class RangebarViewProxy extends TiViewProxy
{
	private static final String LCAT = "Rangebar";
	RangeBar rangebar;

	private class RangebarView extends TiUIView
	{
		public RangebarView(TiViewProxy proxy)
		{
			super(proxy);
			String packageName = proxy.getActivity().getPackageName();
			Resources resources = proxy.getActivity().getResources();
			View viewWrapper;

			int resId_viewHolder;
			int resIdPublish;

			resId_viewHolder = resources.getIdentifier("layout_main", "layout", packageName);
			resIdPublish = resources.getIdentifier("rangebar", "id", packageName);

			LayoutInflater inflater = LayoutInflater.from(proxy.getActivity());
			viewWrapper = inflater.inflate(resId_viewHolder, null);

			rangebar = (RangeBar) viewWrapper.findViewById(resIdPublish);

			rangebar.setOnRangeBarChangeListener(new RangeBar.OnRangeBarChangeListener() {
				@Override
				public void onRangeChangeListener(RangeBar rangeBar, int leftPinIndex, int rightPinIndex,
												  String leftPinValue, String rightPinValue)
				{
					KrollDict d = new KrollDict();
					d.put("startValue", rangeBar.getLeftPinValue());
					d.put("endValue", rangeBar.getRightPinValue());
					fireEvent("change", d);
				}

				@Override
				public void onTouchEnded(RangeBar rangeBar)
				{
					KrollDict d = new KrollDict();
					d.put("startValue", rangeBar.getLeftPinValue());
					d.put("endValue", rangeBar.getRightPinValue());
					fireEvent("touchEnd", d);
				}

				@Override
				public void onTouchStarted(RangeBar rangeBar)
				{
					KrollDict d = new KrollDict();
					d.put("startValue", rangeBar.getLeftPinValue());
					d.put("endValue", rangeBar.getRightPinValue());
					fireEvent("touchStart", d);
				}
			});

			setNativeView(viewWrapper);
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);

			if (d.containsKey("tickEnd")) {
				rangebar.setTickEnd(TiConvert.toFloat(d.get("tickEnd"), 0.0f));
			}

			if (d.containsKey("tickStart")) {
				rangebar.setTickStart(TiConvert.toFloat(d.get("tickStart"), 0.0f));
			}

			if (d.containsKey("tickInterval")) {
				rangebar.setTickInterval(TiConvert.toFloat(d.get("tickInterval"), 0.0f));
			}

			if (d.containsKey("thumbSize")) {
				rangebar.setThumbSize(TiConvert.toInt(d.get("thumbSize"), 10));
			}
			if (d.containsKey("staticPins")) {
				rangebar.setTemporaryPins(!TiConvert.toBoolean(d.get("staticPins"), false));
			}

			if (d.containsKey("pinColor")) {
				rangebar.setPinColor(TiConvert.toColor((String) d.get("pinColor")));
			}
			if (d.containsKey("pinRadius")) {
				rangebar.setPinRadius(TiConvert.toInt(d.get("pinRadius"), 30));
			}
			if (d.containsKey("range")) {
				rangebar.setRangeBarEnabled(TiConvert.toBoolean(d.get("range"), true));
			}
			if (d.containsKey("tickColor")) {
				rangebar.setTickDefaultColor(TiConvert.toColor((String) d.get("tickColor")));
			}
			if (d.containsKey("tickSize")) {
				rangebar.setTickHeight(TiConvert.toFloat(d.get("tickSize"), 4.0f));
			}
			if (d.containsKey("leftThumbColor")) {
				rangebar.setLeftThumbColor(TiConvert.toColor((String) d.get("leftThumbColor")));
			}
			if (d.containsKey("rightThumbColor")) {
				rangebar.setRightThumbColor(TiConvert.toColor((String) d.get("rightThumbColor")));
			}
			if (d.containsKey("connectionLineColor")) {
				rangebar.setConnectingLineColor(TiConvert.toColor((String) d.get("connectionLineColor")));
			}
		}
	}

	// Constructor
	public RangebarViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new RangebarView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
	}
}
